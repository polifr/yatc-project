# Fase 1: Compilazione
FROM rust:trixie AS builder

# Imposta la cartella di lavoro
WORKDIR /app

# Copia il file Cargo e scarica le dipendenze
COPY Cargo.toml Cargo.lock ./
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release

# Copia i sorgenti effettivi e compila
COPY ./src ./src

# Aggiorna il timestamp del main.rs per forzare la compilazione
RUN touch ./src/main.rs

# La compilazione sfrutta il caching di Docker per non scaricare e compilare nuovamente le dipendenze
RUN cargo build --release
RUN strip target/release/ms-rust-axum

# Fase 2: Creazione dell'immagine finale
FROM debian:trixie-slim AS release

# Imposta la cartella di lavoro
WORKDIR /app

# Copia solo il binario compilato dalla fase precedente
COPY --from=builder /app/target/release/ms-rust-axum /app

# Copia i file di configurazione
COPY .env.* /app

# Espone la porta 8081
EXPOSE 8081

# Imposta la variabile di ambiente per le configurazioni di default dell'immagine
ENV ENV_FILENAME=".env.dc"

# Comando di esecuzione
ENTRYPOINT ["/app/ms-rust-axum"]
