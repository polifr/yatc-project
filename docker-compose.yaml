name: yatc-project

services:
  gw-spring-cloud:
    hostname: gw-spring-cloud
    image: yatc/gw-spring-cloud:latest
    restart: no
    container_name: "gw-spring-cloud"
    environment:
    - TZ=Europe/Rome
    ports:
    - 8080:8080
    - 18080:18080
    networks:
    - yatc-frontend
    - yatc-backend
    healthcheck:
      test: "curl --fail --silent localhost:18080/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s
    depends_on:
      yatc-redis:
        condition: service_healthy
        restart: true
      yatc-keycloak:
        condition: service_healthy
        restart: true

  ms-rust-axum:
    hostname: ms-rust-axum
    image: yatc/ms-rust-axum:latest
    restart: no
    container_name: "ms-rust-axum"
    environment:
    - TZ=Europe/Rome
    - RUST_BACKTRACE=full
    - ENV_FILENAME=.env.dc
    ports:
    - 8081:8081
    networks:
    - yatc-backend
    depends_on:
      yatc-redis:
        condition: service_healthy
        restart: true
      yatc-postgres:
        condition: service_healthy
        restart: true

  fe-angular-material:
    hostname: fe-angular-material
    image: yatc/fe-angular-material:latest
    restart: no
    container_name: "fe-angular-material"
    environment:
    - TZ=Europe/Rome
    ports:
    - 5001:5001
    networks:
    - yatc-backend

  fe-react-mui:
    hostname: fe-react-mui
    image: yatc/fe-react-mui:latest
    restart: no
    container_name: "fe-react-mui"
    environment:
    - TZ=Europe/Rome
    ports:
    - 3001:3001
    networks:
    - yatc-backend

  yatc-keycloak:
    hostname: yatc-keycloak
    image: quay.io/keycloak/keycloak:26.1
    restart: no
    container_name: "yatc-keycloak"
    environment:
    - TZ=Europe/Rome
    - KC_HTTP_PORT=8180
    - KC_HTTP_ENABLED=true
    - KC_HEALTH_ENABLED=true
    - KC_METRICS_ENABLED=true
    - KC_HTTP_MANAGEMENT_PORT=9000
    - KC_LOG_LEVEL=INFO
    - KEYCLOAK_ADMIN=kc-admin
    - KEYCLOAK_ADMIN_PASSWORD=kc-admin
    volumes:
    - ./yatc-keycloak/realms:/opt/keycloak/data/import
    ports:
    - 8180:8180
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
      interval: 5s
      timeout: 5s
      retries: 30
    command: ["start-dev", "--import-realm"]
    networks:
    - yatc-frontend

  yatc-postgres:
    hostname: yatc-postgres
    image: postgres:17
    restart: no
    container_name: "yatc-postgres"
    environment:
    - TZ=Europe/Rome
    - POSTGRES_USER=pguser
    - POSTGRES_PASSWORD=pguser
    - POSTGRES_DB=yatc
    volumes:
    - ./yatc-postgresql/init/pg-init.sql:/docker-entrypoint-initdb.d/pg-init.sql
    - ./yatc-postgresql/data:/var/lib/postgresql/data
    ports:
    - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pguser -d yatc"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
    - yatc-backend

  yatc-redis:
    hostname: yatc-redis
    image: redis:7
    restart: no
    container_name: "yatc-redis"
    environment:
    - TZ=Europe/Rome
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    ports:
    - 6379:6379
    networks:
    - yatc-backend

#  yatc-loki:
#    image: grafana/loki
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./yatc-loki/loki-config.yaml:/etc/loki/loki-config.yaml
#    command: -config.file=/etc/loki/loki-config.yaml
  
  yatc-prometheus:
    hostname: yatc-prometheus
    container_name: yatc-prometheus
    image: prom/prometheus
    restart: no
    ports:
      - 9090:9090
    volumes:
      - ./yatc-prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:
    - yatc-backend
    - yatc-frontend
  
  yatc-grafana:
    hostname: yatc-grafana
    container_name: yatc-grafana
    image: grafana/grafana
    restart: no
    ports:
      - 3000:3000
    networks:
    - yatc-backend

networks: 
  yatc-frontend:
    driver: bridge
  yatc-backend:
